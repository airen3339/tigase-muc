/*  Java XMPP Library
 *  Copyright (C) 2005 by Bartosz M. Małkowski
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software Foundation,
 *  Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 *  $Id$
 */
package tigase.muc.xmpp.stanzas;

import tigase.muc.xmpp.StanzaType;

/**
 * Types of Message stanza.
 * <p>
 * Created: 2005-01-27 19:49:29
 * </p>
 * 
 * @author bmalkow
 * @version $Rev$
 */
public enum MessageType implements StanzaType {
    /**
     * The message is sent in the context of a one-to-one chat conversation. A
     * compliant client SHOULD present the message in an interface enabling
     * one-to-one chat between the two parties, including an appropriate
     * conversation history.
     */
    CHAT {
        /** {@inheritDoc} */
        public String toString() {
            return "chat";
        }
    },
    /**
     * An error has occurred related to a previous message sent by the sender
     * (for details regarding stanza error syntax, refer to [XMPP‑CORE]
     * (Saint-Andre, P., “Extensible Messaging and Presence Protocol (XMPP):
     * Core,” October 2004.)). A compliant client SHOULD present an appropriate
     * interface informing the sender of the nature of the error.
     */
    ERROR {
        /** {@inheritDoc} */
        public String toString() {
            return "error";
        }
    },
    /**
     * The message is sent in the context of a multi-user chat environment
     * (similar to that of [IRC] (Oikarinen, J. and D. Reed, “Internet Relay
     * Chat Protocol,” May 1993.)). A compliant client SHOULD present the
     * message in an interface enabling many-to-many chat between the parties,
     * including a roster of parties in the chatroom and an appropriate
     * conversation history. Full definition of XMPP-based groupchat protocols
     * is out of scope for this memo.
     */
    GROUPCHAT {
        /** {@inheritDoc} */
        public String toString() {
            return "groupchat";
        }
    },
    /**
     * The message is probably generated by an automated service that delivers
     * or broadcasts content (news, sports, market information, RSS feeds,
     * etc.). No reply to the message is expected, and a compliant client SHOULD
     * present the message in an interface that appropriately differentiates the
     * message from standalone messages, chat sessions, or groupchat sessions
     * (e.g., by not providing the recipient with the ability to reply).
     */
    HEADLINES {
        /** {@inheritDoc} */
        public String toString() {
            return "headlines";
        }
    },
    /**
     * The message is a single message that is sent outside the context of a
     * one-to-one conversation or groupchat, and to which it is expected that
     * the recipient will reply. A compliant client SHOULD present the message
     * in an interface enabling the recipient to reply, but without a
     * conversation history.
     */
    NORMAL {
        /** {@inheritDoc} */
        public String toString() {
            return "normal";
        }
    },
}
